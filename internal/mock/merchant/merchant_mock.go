// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/merchant/merchant.go
//
// Generated by this command:
//
//	mockgen -destination ./internal/mock/merchant/merchant_mock.go --source ./internal/service/merchant/merchant.go Store
//

// Package mock_merchant is a generated GoMock package.
package mock_merchant

import (
	context "context"
	domain "mateo/internal/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
	isgomock struct{}
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// GetMerchantByMerchantID mocks base method.
func (m *MockStore) GetMerchantByMerchantID(ctx context.Context, merchantID string) (*domain.Merchant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMerchantByMerchantID", ctx, merchantID)
	ret0, _ := ret[0].(*domain.Merchant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMerchantByMerchantID indicates an expected call of GetMerchantByMerchantID.
func (mr *MockStoreMockRecorder) GetMerchantByMerchantID(ctx, merchantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMerchantByMerchantID", reflect.TypeOf((*MockStore)(nil).GetMerchantByMerchantID), ctx, merchantID)
}
