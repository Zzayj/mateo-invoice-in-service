// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/requisite/requisite.go
//
// Generated by this command:
//
//	mockgen -destination ./internal/mock/requisite/requisite_mock.go --source ./internal/service/requisite/requisite.go Store
//

// Package mock_requisite is a generated GoMock package.
package mock_requisite

import (
	context "context"
	domain "mateo/internal/domain"
	reflect "reflect"

	decimal "github.com/shopspring/decimal"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
	isgomock struct{}
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// GetBoostedTeamIds mocks base method.
func (m *MockStore) GetBoostedTeamIds(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoostedTeamIds", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoostedTeamIds indicates an expected call of GetBoostedTeamIds.
func (mr *MockStoreMockRecorder) GetBoostedTeamIds(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoostedTeamIds", reflect.TypeOf((*MockStore)(nil).GetBoostedTeamIds), ctx)
}

// SelectAvailableRequisites mocks base method.
func (m *MockStore) SelectAvailableRequisites(ctx context.Context, merchantID string, amount decimal.Decimal, requisiteType domain.RequisiteType, bankId string) ([]*domain.Requisite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAvailableRequisites", ctx, merchantID, amount, requisiteType, bankId)
	ret0, _ := ret[0].([]*domain.Requisite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAvailableRequisites indicates an expected call of SelectAvailableRequisites.
func (mr *MockStoreMockRecorder) SelectAvailableRequisites(ctx, merchantID, amount, requisiteType, bankId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAvailableRequisites", reflect.TypeOf((*MockStore)(nil).SelectAvailableRequisites), ctx, merchantID, amount, requisiteType, bankId)
}

// SelectAvailableRequisitesFlexible mocks base method.
func (m *MockStore) SelectAvailableRequisitesFlexible(ctx context.Context, merchantID string, flexibleAmountMin, flexibleAmountMax, flexibleAmountStep decimal.Decimal, requisiteType domain.RequisiteType, bankId string) ([]*domain.Requisite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAvailableRequisitesFlexible", ctx, merchantID, flexibleAmountMin, flexibleAmountMax, flexibleAmountStep, requisiteType, bankId)
	ret0, _ := ret[0].([]*domain.Requisite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAvailableRequisitesFlexible indicates an expected call of SelectAvailableRequisitesFlexible.
func (mr *MockStoreMockRecorder) SelectAvailableRequisitesFlexible(ctx, merchantID, flexibleAmountMin, flexibleAmountMax, flexibleAmountStep, requisiteType, bankId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAvailableRequisitesFlexible", reflect.TypeOf((*MockStore)(nil).SelectAvailableRequisitesFlexible), ctx, merchantID, flexibleAmountMin, flexibleAmountMax, flexibleAmountStep, requisiteType, bankId)
}
